AWSTemplateFormatVersion: "2010-09-09"

Description: >
  This template builds all Lambda function helpers and thier IAM roles.

Resources:
# Empty S3 On Delete Lambda Resources (will empty the bucket on delete).
  EmptyBucketOnDeleteLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ '-', [ !ImportValue ProjectID, !ImportValue EnvironmentType, 'EmptyS3', "Role"] ]    
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: !Join [ '-', [ !ImportValue ProjectID, !ImportValue EnvironmentType, 'EmptyS3', "Policy"] ]
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            - s3:*
            Resource: '*'
          - Effect: Deny
            Action:
            - s3:DeleteBucket
            Resource: '*'

  EmptyS3OnDeleteLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: !Sub |
          #!/usr/bin/env python
          # -*- coding: utf-8 -*-
          import json
          import boto3
          from botocore.vendored import requests
          def empty_delete_buckets(bucket_name):
              """
              Empties and deletes the bucket
              :param bucket_name:
              :param region:
              :return:
              """
              print "trying to delete the bucket {0}".format(bucket_name)
              # s3_client = SESSION.client('s3', region_name=region)
              s3_client = boto3.client('s3')
              # s3 = SESSION.resource('s3', region_name=region)
              s3 = boto3.resource('s3')
              try:
                  bucket = s3.Bucket(bucket_name).load()
              except ClientError:
                  print "bucket {0} does not exist".format(bucket_name)
                  return
              # Check if versioning is enabled
              response = s3_client.get_bucket_versioning(Bucket=bucket_name)
              status = response.get('Status','')
              if status == 'Enabled':
                  response = s3_client.put_bucket_versioning(Bucket=bucket_name,
                                                             VersioningConfiguration={'Status': 'Suspended'})
              paginator = s3_client.get_paginator('list_object_versions')
              page_iterator = paginator.paginate(
                  Bucket=bucket_name
              )
              for page in page_iterator:
                  print page
                  if 'DeleteMarkers' in page:
                      delete_markers = page['DeleteMarkers']
                      if delete_markers is not None:
                          for delete_marker in delete_markers:
                              key = delete_marker['Key']
                              versionId = delete_marker['VersionId']
                              s3_client.delete_object(Bucket=bucket_name, Key=key, VersionId=versionId)
                  if 'Versions' in page and page['Versions'] is not None:
                      versions = page['Versions']
                      for version in versions:
                          print version
                          key = version['Key']
                          versionId = version['VersionId']
                          s3_client.delete_object(Bucket=bucket_name, Key=key, VersionId=versionId)
              object_paginator = s3_client.get_paginator('list_objects_v2')
              page_iterator = object_paginator.paginate(
                  Bucket=bucket_name
              )
              for page in page_iterator:
                  if 'Contents' in page:
                      for content in page['Contents']:
                          key = content['Key']
                          s3_client.delete_object(Bucket=bucket_name, Key=content['Key'])
              #UNCOMMENT THE LINE BELOW TO MAKE LAMBDA DELETE THE BUCKET.  
              # THIS WILL CAUSE AN FAILURE SINCE CLOUDFORMATION ALSO TRIES TO DELETE THE BUCKET
              #s3_client.delete_bucket(Bucket=bucket_name)
              #print "Successfully deleted the bucket {0}".format(bucket_name)
              print "Successfully emptied the bucket {0}".format(bucket_name)
          def lambda_handler(event, context):
              try:
                  bucket = event['ResourceProperties']['BucketName']
                  if event['RequestType'] == 'Delete':
                      empty_delete_buckets(bucket)
                      #s3 = boto3.resource('s3')
                      #bucket.objects.all().delete()
                      #bucket = s3.Bucket(bucket)
                      #for obj in bucket.objects.filter():
                          #s3.Object(bucket.name, obj.key).delete()
                  sendResponseCfn(event, context, "SUCCESS")
              except Exception as e:
                  print(e)
                  sendResponseCfn(event, context, "FAILED")
          def sendResponseCfn(event, context, responseStatus):
              response_body = {'Status': responseStatus,
                               'Reason': 'Log stream name: ' + context.log_stream_name,
                               'PhysicalResourceId': context.log_stream_name,
                               'StackId': event['StackId'],
                               'RequestId': event['RequestId'],
                               'LogicalResourceId': event['LogicalResourceId'],
                               'Data': json.loads("{}")}
              requests.put(event['ResponseURL'], data=json.dumps(response_body))
      Description: cleanup Bucket on Delete Lambda Lambda function.
      # FunctionName: lambda_function
      Handler: index.lambda_handler
      Role : !GetAtt EmptyBucketOnDeleteLambdaRole.Arn
      Runtime: python2.7
      Timeout: 60

# Integrate website with AWS Cognito and Amazon API.      
  CognitoConfigLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ '-', [ !ImportValue ProjectID, !ImportValue EnvironmentType, 'websiteIntegration', "Role"] ]     
      Path: "/"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName:  !Join [ '-', [ !ImportValue ProjectID, !ImportValue EnvironmentType, 'websiteIntegration', "Policy"] ]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Sid: Logging
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              -
                Sid: Cognito
                Effect: Allow
                Action:
                  - "cognito-idp:CreateUserPool"
                  - "cognito-idp:DeleteUserPool"
                  - "cognito-idp:CreateUserPoolClient"
                  - "cognito-idp:DeleteUserPoolClient"
                Resource: "*"
              -
                Sid: ConfigBucketWriteAccess
                Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:PutObjectVersionAcl"
                Resource: "*"
                  # - !Join [ "", [ !ImportValue WebsiteBucketARN, "/*" ] ]
                  # (if you enable this line this policy will be dependent on WebsiteBucket creation).

  UpdateWebConfigLambda:
    Type: AWS::Lambda::Function  
    Properties:
      Description: Dynamicly creates config.js file.
      Handler: index.handler
      Runtime: python2.7
      Role: !GetAtt CognitoConfigLambdaRole.Arn
      Timeout: 120
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse

          s3 = boto3.resource('s3')

          def create(properties, physical_id):
            userPoolId = properties['UserPool']
            clientId = properties['Client']
            region = properties['Region']
            bucket = properties['Bucket']
            invokeUrl = properties['InvokeUrl']

            object = s3.Object(bucket, 'js/config.js')
            config_content = """
          var _config = {
              cognito: {
                  userPoolId: '%s', // e.g. us-east-2_uXboG5pAb
                  userPoolClientId: '%s', // e.g. 25ddkmj4v6hfsfvruhpfi7n4hv
                  region: '%s', // e.g. us-east-2
              },
              api: {
                  invokeUrl: '%s', // e.g. https://rc7nyt4tql.execute-api.us-west-2.amazonaws.com/prod'
              }
          };
              """
            config_content = config_content % (userPoolId, clientId, region, invokeUrl)
            config = s3.Object(bucket,'js/config.js')
            config.put(Body=config_content)
            return cfnresponse.SUCCESS, None

          def update(properties, physical_id):
            return create(properties, physical_id)

          def delete(properties, physical_id):
            return cfnresponse.SUCCESS, physical_id

          def handler(event, context):
            print "Received event: %s" % json.dumps(event)

            status = cfnresponse.FAILED
            new_physical_id = None

            try:
              properties = event.get('ResourceProperties')
              physical_id = event.get('PhysicalResourceId')

              status, new_physical_id = {
                'Create': create,
                'Update': update,
                'Delete': delete
              }.get(event['RequestType'], lambda x, y: (cfnresponse.FAILED, None))(properties, physical_id)
            except Exception as e:
              print "Exception: %s" % e
              status = cfnresponse.FAILED
            finally:
              cfnresponse.send(event, context, status, {}, new_physical_id)      
      

Outputs:
  EmptyS3OnDeleteLambdaARN:
    Value:
       Fn::GetAtt: 
          - "EmptyS3OnDeleteLambda"
          - "Arn"    
    Export:
      Name: EmptyS3OnDeleteLambdaARN 

  UpdateWebConfigLambdaARN:
    Value:
       Fn::GetAtt: 
          - "UpdateWebConfigLambda"
          - "Arn"    
    Export:
      Name: UpdateWebConfigLambdaARN       